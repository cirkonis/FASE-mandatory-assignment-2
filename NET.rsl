scheme NET =
class
  type 
    Time = Nat, 
    Headway = Time, 
    DrivingTime = Time, 
    Capacity = Nat,
    StopId = Text, 
    Connection = (Capacity >< DrivingTime >< Headway >< Stop >< Stop ),
    Stop = (StopId >< Capacity),
    Net = (Stop-list >< Connection-list)
    /*Net = ((Stop >< Stop) >< Capacity)-list >< Stop-list*/
    /*Net = ((Stop >< Stop) >< Capacity)-list*/

  value /* generators */
    empty :  Net = (<..>, <..>), 


    insertStop : StopId >< Capacity >< Net -> Net
    insertStop(stp,cap,net) is
    let (sl,cl)=net, h=sl union <.(stp,cap).> in
    <.(h,cl).>
    end

/*
    -- add a connection between given stops, 
    -- with the given minimum headway, capacity and minimum driving time
    addConnection : StopId >< StopId  >< Headway >< Capacity >< DrivingTime >< Net -> Net
    ... 
*/

  value /* observers */
   
    isIn : StopId >< Net -> Bool
    isIn(stpId, Net) is
    let stopList = hd(net),

 /*made a change here*/


    -- get the capacity of a stop 
    capacity : StopId >< Net -~-> Capacity
    ...,

    -- check whether two stops are directly connected in a network        
    areDirectlyConnected : StopId >< StopId >< Net -> Bool
    ...,

    -- get minimum headway between two connected stops        
    minHeadway : StopId >< StopId >< Net -~-> Headway
    ..., 

   -- get the capacity for a connection between two connected stops
    capacity : StopId >< StopId >< Net -~-> Capacity
    ...,
 
    -- get minimum driving time between two connected stops        
    minDrivingTime : StopId >< StopId >< Net -~-> DrivingTime
    ...

 
  value /* predicates to check nets */
    isWellformed : Net -> Bool
    isWellformed(n) is ...
end
