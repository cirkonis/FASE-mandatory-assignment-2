scheme NETTest =
class
  type 
    Time = Nat, 
    Headway = Time, 
    DrivingTime = Time, 
    Capacity = Nat,
    StopId = Text, 
    Connection = (Stop >< Stop >< Headway >< Capacity >< DrivingTime),
    Stop = (StopId >< Capacity),
    Net = (Stop-list >< Connection-list)
    /*Net = ((Stop >< Stop) >< Capacity)-list >< Stop-list*/
    /*Net = ((Stop >< Stop) >< Capacity)-list*/

  value /* generators */
    empty :  Net = (<..>, <..>), 

    insertStop : StopId >< Capacity >< Net -> Net
    insertStop(stopid, cap, net) is 
        let (sl, cl) = net, h = (sl ^ <.(stopid, cap).>) in 
          (h, cl) 
        end, 


    -- add a connection between given stops, 
    -- with the given minimum headway, capacity and minimum driving time
    addConnection : StopId >< StopId  >< Headway >< Capacity >< DrivingTime >< Net -> Net
    addConnection(startid, stpid, hw, c, dt, net) is
    let (sl,cl) = net, stpidOne = getStop(startid, sl), stpidTwo = getStop(stpid, sl) in
    (sl, cl ^ <.(stpidOne, stpidTwo, hw, c, dt).>)
    end



  value /* observers */
   
    getStop : StopId >< Stop-list -> Stop
    getStop(stpid, sl) is
    if sl = <..>
      then ("",0)
    else
      let stp = hd(sl), (si,c)=stp in
        if stpid = si
          then stop
        else
          getStop(stpid,tl(sl))
        end
      end
    end
end
